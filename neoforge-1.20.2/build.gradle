plugins {
    id('com.github.johnrengelman.shadow') version('8.1.1')
    id('net.neoforged.gradle.userdev') version('7.0.5')
//    id('org.parchmentmc.librarian.forgegradle') version('1.+')
}

base {
    archivesName = project_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(java_version)
sourceCompatibility = java_version
targetCompatibility = java_version

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    implementation(project(path: ':common', configuration: 'shadow'))
    compileOnly("net.neoforged:neoforge:${neo_version}")
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            forge_version_range    : forge_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : project_id,
            mod_name               : project_name,
            mod_license            : mod_license,
            mod_version            : version,
            mod_authors            : mod_authors,
            mod_description        : mod_description,
            pack_format_number     : pack_format_number,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

shadowJar {
    dependencies {
        include(project(':common'))
    }

    destinationDirectory = file('../target')
    archiveFileName = "${project_name}-neoforge-${minecraft_version}-${version}.jar"
}
shadowJar.doLast {
    task ->
        ant.checksum(file: task.archivePath) {
            hashAlgorithm = 'md5'
            property = 'md5sum'
        }
}

artifacts {
    archives(shadowJar)
}
