plugins {
    id('net.minecraftforge.gradle') version('[6.0,6.2)')
//    id('org.spongepowered.mixin') version('0.7.+')
    id('org.parchmentmc.librarian.forgegradle') version('1.+')
}

java.toolchain.languageVersion = JavaLanguageVersion.of(java_version)
sourceCompatibility = targetCompatibility = java_version

minecraft {
    mappings(channel: mapping_channel, version: mapping_version)
}

dependencies {
    minecraft("net.minecraftforge:forge:${minecraft_version}-${forge_version}")
//    annotationProcessor('org.spongepowered:mixin:0.8.5:processor')
    compileOnly(project(':common'))
    compileOnly(project(":forge:forge-1.20"))
    compileOnly(project(":vanilla:vanilla-1.20"))
    implementation(project(":vanilla:vanilla-${minecraft_version}"))
}

//mixin {
//    add(sourceSets.main, "${project_id}.mixins.forge.refmap_1_20_2.json")
//    config("${project_id}.mixins.forge_1_20_2.json")
//}

tasks.withType(ProcessResources).configureEach {
    filesMatching(['META-INF/mods.toml', 'pack.mcmeta', "${project_id}.mixins.forge.patch.1_20_2.json".toString()]) {
        expand project.properties
    }
}

shadowJar {
    dependencies {
        include(project(":vanilla:vanilla-${minecraft_version}"))
//        exclude("${group_id}.${project_id}.vanilla.mixin.listeners")
    }
    // Cheap trick to get rid of mixin.listeners, since the exclude above doesn't work
    relocate("${group_id}.${project_id}.vanilla.mixin.listeners", "${group_id}.${project_id}.vanilla.forge.mixin.fake")
    relocate("${group_id}.${project_id}.vanilla.forge", "${group_id}.${project_id}.vanilla.forge")
    relocate("${group_id}.${project_id}.vanilla", "${group_id}.${project_id}.vanilla.forge")
    destinationDirectory = file('../../target')
    archiveFileName = "${project_id}-forge-${minecraft_version}-${version}.jar"
}

reobf {
    shadowJar {}
}

tasks.assemble.dependsOn('reobfShadowJar')
