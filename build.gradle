import com.google.common.collect.ImmutableMap

plugins {
    id('java')
    id('maven-publish')
    id('com.github.johnrengelman.shadow') version('8.1.1')
    id('fabric-loom') version('1.6-SNAPSHOT') apply(false)
    id("org.spongepowered.gradle.vanilla") version("0.2.1-SNAPSHOT") apply(false)
}

defaultTasks('build')

subprojects {
    apply(plugin: 'java')
    apply(plugin: 'com.github.johnrengelman.shadow')

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8'
    }

    repositories {
        mavenLocal()
        mavenCentral()

        // Minecraft
        maven {
            name = "minecraft-repo"
            url = "https://libraries.minecraft.net/"
        }

        // Bukkit/Bungee
        maven {
            name = "spigotmc-repo"
            url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
        }

        // Paper/Velocity
        maven {
            name = "papermc-repo"
            url = "https://repo.papermc.io/repository/maven-public/"
        }

        // Parchment Mappings
        maven {
            name = 'ParchmentMC'
            url = 'https://maven.parchmentmc.org'
        }
    }
}

var List<String> legacyForgeVersions = [
        "1.7.10",
        "1.8.9",
        "1.9.4",
        "1.10.2",
        "1.11.2"
]

// --------------------------- Jar file helper method --------------------------------
ext.bundleJars = { Map<String, List<String>> platformVersions ->
    ArrayList<File> jarFiles = [
            file("./common/build/libs/${project_id}-common-${version}.jar"),
            file("./tooling/loader/build/libs/${project_id}-loader-0.1.2.jar")
    ]

    var boolean isNeoForge = false
    platformVersions.each { platform, versions ->
        if (platform == 'neoforge') {
            isNeoForge = true
        }

        versions.each { mcVersion ->
            var platformDir = platform
            if (platform == 'forge' && legacyForgeVersions.contains(mcVersion)) {
                platformDir = 'forge-legacy'
            }
            jarFiles.add(file("${platformDir}/${platform}-${mcVersion}/build/libs/${project_id}-${platform}-${mcVersion}-${version}.jar") as File)
        }
    }

    return jarFiles.collect {
        if (it.name.contains('-forge') && isNeoForge) {
            zipTree(it).matching {
                exclude('META-INF/mods.toml')
            }
        } else if (it.name.contains('sponge4') || it.name.contains('sponge5')
                || it.name.contains('sponge6') || it.name.contains('sponge7')) {
            zipTree(it).matching {
                exclude('mcmod.info')
            }
        } else {
            zipTree(it)
        }
    }
}

// --------------------------- Clear build/libs --------------------------------
tasks.register('clear_build') {
    delete fileTree('build/libs')
}

// --------------------------- Build api --------------------------------
tasks.register('build_api', Jar) {
    dependsOn('clear_build')
    dependsOn(':common:test')
    dependsOn(':common:shadowJar')
    dependsOn(':tooling:loader:build')

    archiveFileName = "${project_id}-api-${version}.jar"
    destinationDirectory = file("./build/libs")
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes 'Specification-Title': "${project_name} API",
                'Specification-Version': version,
                'Specification-Vendor': 'NeuralNexus',
                'Implementation-Version': version,
                'Implementation-Vendor': 'NeuralNexus',
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    }

    from(["README.md", "LICENSE", "LICENSE-API"]) {
        into("META-INF")
    }
    ArrayList<File> jarFiles = [
            file("./common/build/libs/${project_id}-common-${version}.jar")
    ]
    from {
        jarFiles.collect {
            if (it.name.contains('common')) {
                zipTree(it).matching {
                    exclude('dev/neuralnexus/taterlib/lib/**')
                }
            } else {
                zipTree(it)
            }
        }
    }
}

// --------------------------- Build api full ---------------------------
tasks.register('build_api_full', Jar) {
    dependsOn('clear_build')
    dependsOn(':common:shadowJar')
    dependsOn(':tooling:loader:build')

    archiveFileName = "${project_id}-api-full-${version}.jar"
    destinationDirectory = file("./build/libs")
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes 'Specification-Title': "${project_name} API With Libs",
                'Specification-Version': version,
                'Specification-Vendor': 'NeuralNexus',
                'Implementation-Version': version,
                'Implementation-Vendor': 'NeuralNexus',
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    }

    from(["README.md", "LICENSE", "LICENSE-API"]) {
        into("META-INF")
    }
    ArrayList<File> jarFiles = [
            file("./common/build/libs/${project_id}-common-${version}.jar"),
            file("./tooling/loader/build/libs/${project_id}-loader-0.1.2.jar")
    ]
    from {
        jarFiles.collect {
            zipTree(it)
        }
    }
}

// --------------------------- Build Entry Point Spoof --------------------------------
tasks.register('build_entrypoint_spoof', Jar) {
    // TODO: remove this redundant garbage
    dependsOn('tooling:entrypoint-spoof:build')

    archiveFileName = "entrypoint-spoof-${entrypoint_spoof_version}.jar"
    destinationDirectory = file("./build/libs")

    from(["README.md", "LICENSE"]) {
        into("META-INF")
    }

    from {
        zipTree(file("./tooling/entrypoint-spoof/build/libs/entrypoint-spoof-${entrypoint_spoof_version}.jar"))
    }
}

// --------------------------- Build Legacy Forge --------------------------------
tasks.register('build_legacy_forge', Exec) {
    try {
        executable 'bash'
        args '-c', "export JAVA_HOME=${java_8_home} && cd forge-legacy && ./gradlew forge-1.7.10:setupDecompWorkspace && ./gradlew build"
    } catch (Exception e) {
        println(e)
    }
}

// --------------------------- Build 1.7.10 --------------------------------
tasks.register('build_1_7_10', Jar) {
    var platformVersions = ImmutableMap.<String, List<String>> builder()
            .put("fabric", Arrays.asList("1.7.10"))
            .build()

    dependsOn('build_api')
    platformVersions.each { platform, versions ->
        versions.each { mcVersion ->
            if (platform == 'forge') {
                dependsOn('build_legacy_forge')
            } else {
                dependsOn(":${platform}:${platform}-${mcVersion}:build")
            }
        }
    }

    String mc_version = '1.7.10'
    archiveFileName = "${project_id}-${mc_version}-${version}.jar"
    destinationDirectory = file("./build/libs")
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes 'Specification-Title': "${project_name} ${mc_version}",
                'Specification-Version': version,
                'Specification-Vendor': 'NeuralNexus',
                'Implementation-Version': version,
                'Implementation-Vendor': 'NeuralNexus',
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    }

    from(["README.md", "LICENSE", "LICENSE-API"]) {
        into("META-INF")
    }
    from {
        bundleJars(platformVersions)
    }
}

// --------------------------- Build 1.8 --------------------------------
tasks.register('build_1_8', Jar) {
    var platformVersions = ImmutableMap.<String, List<String>> builder()
            .put("fabric", Arrays.asList("1.8.9"))
            .build()

    dependsOn('build_api')
    platformVersions.each { platform, versions ->
        versions.each { mcVersion ->
            if (platform == 'forge') {
                dependsOn('build_legacy_forge')
            } else {
                dependsOn(":${platform}:${platform}-${mcVersion}:build")
            }
        }
    }

    String mc_version = '1.8'
    archiveFileName = "${project_id}-${mc_version}-${version}.jar"
    destinationDirectory = file("./build/libs")
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes 'Specification-Title': "${project_name} ${mc_version}",
                'Specification-Version': version,
                'Specification-Vendor': 'NeuralNexus',
                'Implementation-Version': version,
                'Implementation-Vendor': 'NeuralNexus',
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    }

    from(["README.md", "LICENSE", "LICENSE-API"]) {
        into("META-INF")
    }
    from {
        bundleJars(platformVersions)
    }
}

// --------------------------- Build 1.9 --------------------------------
tasks.register('build_1_9', Jar) {
    var platformVersions = ImmutableMap.<String, List<String>> builder()
            .put("fabric", Arrays.asList("1.9.4"))
            .build()

    dependsOn('build_api')
    platformVersions.each { platform, versions ->
        versions.each { mcVersion ->
            if (platform == 'forge') {
                dependsOn('build_legacy_forge')
            } else {
                dependsOn(":${platform}:${platform}-${mcVersion}:build")
            }
        }
    }

    String mc_version = '1.9.4'
    archiveFileName = "${project_id}-${mc_version}-${version}.jar"
    destinationDirectory = file("./build/libs")
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes 'Specification-Title': "${project_name} ${mc_version}",
                'Specification-Version': version,
                'Specification-Vendor': 'NeuralNexus',
                'Implementation-Version': version,
                'Implementation-Vendor': 'NeuralNexus',
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    }

    from(["README.md", "LICENSE", "LICENSE-API"]) {
        into("META-INF")
    }
    from {
        bundleJars(platformVersions)
    }
}

// --------------------------- Build 1.10 --------------------------------
tasks.register('build_1_10', Jar) {
    var platformVersions = ImmutableMap.<String, List<String>> builder()
            .put("fabric", Arrays.asList("1.10.2"))
            .build()

    dependsOn('build_api')
    platformVersions.each { platform, versions ->
        versions.each { mcVersion ->
            if (platform == 'forge') {
                dependsOn('build_legacy_forge')
            } else {
                dependsOn(":${platform}:${platform}-${mcVersion}:build")
            }
        }
    }

    String mc_version = '1.10'
    archiveFileName = "${project_id}-${mc_version}-${version}.jar"
    destinationDirectory = file("./build/libs")
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes 'Specification-Title': "${project_name} ${mc_version}",
                'Specification-Version': version,
                'Specification-Vendor': 'NeuralNexus',
                'Implementation-Version': version,
                'Implementation-Vendor': 'NeuralNexus',
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    }

    from(["README.md", "LICENSE", "LICENSE-API"]) {
        into("META-INF")
    }
    from {
        bundleJars(platformVersions)
    }
}

// --------------------------- Build 1.11 --------------------------------
tasks.register('build_1_11', Jar) {
    var platformVersions = ImmutableMap.<String, List<String>> builder()
            .put("fabric", Arrays.asList("1.11.2"))
            .build()

    dependsOn('build_api')
    platformVersions.each { platform, versions ->
        versions.each { mcVersion ->
            if (platform == 'forge') {
                dependsOn('build_legacy_forge')
            } else {
                dependsOn(":${platform}:${platform}-${mcVersion}:build")
            }
        }
    }

    String mc_version = '1.11.2'
    archiveFileName = "${project_id}-${mc_version}-${version}.jar"
    destinationDirectory = file("./build/libs")
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes 'Specification-Title': "${project_name} ${mc_version}",
                'Specification-Version': version,
                'Specification-Vendor': 'NeuralNexus',
                'Implementation-Version': version,
                'Implementation-Vendor': 'NeuralNexus',
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    }

    from(["README.md", "LICENSE", "LICENSE-API"]) {
        into("META-INF")
    }

    from {
        bundleJars(platformVersions)
    }
}

// --------------------------- Build 1.12 --------------------------------
tasks.register('build_1_12', Jar) {
    var platformVersions = ImmutableMap.<String, List<String>> builder()
            .put("fabric", Arrays.asList("1.12.2"))
            .build()

    dependsOn('build_api')
    platformVersions.each { platform, versions ->
        versions.each { mcVersion ->
            dependsOn(":${platform}:${platform}-${mcVersion}:build")
        }
    }

    String mc_version = '1.12.2'
    archiveFileName = "${project_id}-${mc_version}-${version}.jar"
    destinationDirectory = file("./build/libs")
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes 'Specification-Title': "${project_name} ${mc_version}",
                'Specification-Version': version,
                'Specification-Vendor': 'NeuralNexus',
                'Implementation-Version': version,
                'Implementation-Vendor': 'NeuralNexus',
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    }

    from(["README.md", "LICENSE", "LICENSE-API"]) {
        into("META-INF")
    }

    from {
        bundleJars(platformVersions)
    }
}

// --------------------------- Build 1.14 --------------------------------
tasks.register('build_1_14', Jar) {
    var platformVersions = ImmutableMap.<String, List<String>> builder()
            .put("fabric", Arrays.asList("1.14"))
            .build()

    dependsOn('build_api')
    platformVersions.each { platform, versions ->
        versions.each { mcVersion ->
            dependsOn(":${platform}:${platform}-${mcVersion}:build")
        }
    }

    String mc_version = '1.14'
    archiveFileName = "${project_id}-${mc_version}-${version}.jar"
    destinationDirectory = file("./build/libs")
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes 'Specification-Title': "${project_name} ${mc_version}",
                'Specification-Version': version,
                'Specification-Vendor': 'NeuralNexus',
                'Implementation-Version': version,
                'Implementation-Vendor': 'NeuralNexus',
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    }

    from(["README.md", "LICENSE", "LICENSE-API"]) {
        into("META-INF")
    }

    from {
        bundleJars(platformVersions)
    }
}

// --------------------------- Build 1.15 --------------------------------
tasks.register('build_1_15', Jar) {
    var platformVersions = ImmutableMap.<String, List<String>> builder()
            .put("fabric", Arrays.asList("1.15"))
            .build()

    dependsOn('build_api')
    platformVersions.each { platform, versions ->
        versions.each { mcVersion ->
            dependsOn(":${platform}:${platform}-${mcVersion}:build")
        }
    }

    String mc_version = '1.15'
    archiveFileName = "${project_id}-${mc_version}-${version}.jar"
    destinationDirectory = file("./build/libs")
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes 'Specification-Title': "${project_name} ${mc_version}",
                'Specification-Version': version,
                'Specification-Vendor': 'NeuralNexus',
                'Implementation-Version': version,
                'Implementation-Vendor': 'NeuralNexus',
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    }

    from(["README.md", "LICENSE", "LICENSE-API"]) {
        into("META-INF")
    }

    from {
        bundleJars(platformVersions)
    }
}

// --------------------------- Build 1.16 --------------------------------
tasks.register('build_1_16', Jar) {
    var platformVersions = ImmutableMap.<String, List<String>> builder()
            .put("fabric", Arrays.asList("1.16"))
            .build()

    dependsOn('build_api')
    platformVersions.each { platform, versions ->
        versions.each { mcVersion ->
            dependsOn(":${platform}:${platform}-${mcVersion}:build")
        }
    }

    String mc_version = '1.16'
    archiveFileName = "${project_id}-${mc_version}-${version}.jar"
    destinationDirectory = file("./build/libs")
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes 'Specification-Title': "${project_name} ${mc_version}",
                'Specification-Version': version,
                'Specification-Vendor': 'NeuralNexus',
                'Implementation-Version': version,
                'Implementation-Vendor': 'NeuralNexus',
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    }

    from(["README.md", "LICENSE", "LICENSE-API"]) {
        into("META-INF")
    }

    from {
        bundleJars(platformVersions)
    }
}

// --------------------------- Build 1.17 --------------------------------
tasks.register('build_1_17', Jar) {
    var platformVersions = ImmutableMap.<String, List<String>> builder()
            .put("fabric", Arrays.asList("1.17"))
            .build()

    dependsOn('build_api')
    platformVersions.each { platform, versions ->
        versions.each { mcVersion ->
            dependsOn(":${platform}:${platform}-${mcVersion}:build")
        }
    }

    String mc_version = '1.17'
    archiveFileName = "${project_id}-${mc_version}-${version}.jar"
    destinationDirectory = file("./build/libs")
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes 'Specification-Title': "${project_name} ${mc_version}",
                'Specification-Version': version,
                'Specification-Vendor': 'NeuralNexus',
                'Implementation-Version': version,
                'Implementation-Vendor': 'NeuralNexus',
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    }

    from(["README.md", "LICENSE", "LICENSE-API"]) {
        into("META-INF")
    }

    from {
        bundleJars(platformVersions)
    }
}

// --------------------------- Build 1.18 --------------------------------
tasks.register('build_1_18', Jar) {
    var platformVersions = ImmutableMap.<String, List<String>> builder()
            .put("fabric", Arrays.asList("1.18"))
            .build()

    dependsOn('build_api')
    platformVersions.each { platform, versions ->
        versions.each { mcVersion ->
            dependsOn(":${platform}:${platform}-${mcVersion}:build")
        }
    }

    String mc_version = '1.18'
    archiveFileName = "${project_id}-${mc_version}-${version}.jar"
    destinationDirectory = file("./build/libs")
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes 'Specification-Title': "${project_name} ${mc_version}",
                'Specification-Version': version,
                'Specification-Vendor': 'NeuralNexus',
                'Implementation-Version': version,
                'Implementation-Vendor': 'NeuralNexus',
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    }

    from(["README.md", "LICENSE", "LICENSE-API"]) {
        into("META-INF")
    }

    from {
        bundleJars(platformVersions)
    }
}

// --------------------------- Build 1.18.2 --------------------------------
tasks.register('build_1_18_2', Jar) {
    var platformVersions = ImmutableMap.<String, List<String>> builder()
            .put("fabric", Arrays.asList("1.18"))
            .build()

    dependsOn('build_api')
    platformVersions.each { platform, versions ->
        versions.each { mcVersion ->
            dependsOn(":${platform}:${platform}-${mcVersion}:build")
        }
    }

    String mc_version = '1.18.2'
    archiveFileName = "${project_id}-${mc_version}-${version}.jar"
    destinationDirectory = file("./build/libs")
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes 'Specification-Title': "${project_name} ${mc_version}",
                'Specification-Version': version,
                'Specification-Vendor': 'NeuralNexus',
                'Implementation-Version': version,
                'Implementation-Vendor': 'NeuralNexus',
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    }

    from(["README.md", "LICENSE", "LICENSE-API"]) {
        into("META-INF")
    }

    from {
        bundleJars(platformVersions)
    }

    // entity.level.getBiome(entity.blockPosition()).getRegistryName();
    // Changed to
    // entity.level.getBiome(entity.blockPosition()).value().getRegistryName();

    // Uses 1.19 permission schema
}

// --------------------------- Build 1.19 --------------------------------
tasks.register('build_1_19', Jar) {
    var platformVersions = ImmutableMap.<String, List<String>> builder()
            .put("fabric", Arrays.asList("1.19", "1.19.1", "1.19.3", "1.19.4"))
            .put("vanilla", Arrays.asList("1.19", "1.19.1", "1.19.3", "1.19.4"))
            .build()

    dependsOn('build_api')
    platformVersions.each { platform, versions ->
        versions.each { mcVersion ->
            dependsOn(":${platform}:${platform}-${mcVersion}:build")
        }
    }

    String mc_version = '1.19'
    archiveFileName = "${project_id}-${mc_version}-${version}.jar"
    destinationDirectory = file("./build/libs")
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes 'Specification-Title': "${project_name} ${mc_version}",
                'Specification-Version': version,
                'Specification-Vendor': 'NeuralNexus',
                'Implementation-Version': version,
                'Implementation-Vendor': 'NeuralNexus',
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    }

    from(["README.md", "LICENSE", "LICENSE-API"]) {
        into("META-INF")
    }
    from {
        bundleJars(platformVersions)
    }
}

// --------------------------- Build 1.19.2 --------------------------------
tasks.register('build_1_19_2', Jar) {
    var platformVersions = ImmutableMap.<String, List<String>> builder()
            .put("fabric", Arrays.asList("1.19", "1.19.1", "1.19.3", "1.19.4"))
            .put("vanilla", Arrays.asList("1.19", "1.19.1", "1.19.3", "1.19.4"))
            .build()

    dependsOn('build_api')
    platformVersions.each { platform, versions ->
        versions.each { mcVersion ->
            dependsOn(":${platform}:${platform}-${mcVersion}:build")
        }
    }

    String mc_version = '1.19.2'
    archiveFileName = "${project_id}-${mc_version}-${version}.jar"
    destinationDirectory = file("./build/libs")
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes 'Specification-Title': "${project_name} ${mc_version}",
                'Specification-Version': version,
                'Specification-Vendor': 'NeuralNexus',
                'Implementation-Version': version,
                'Implementation-Vendor': 'NeuralNexus',
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    }

    from(["README.md", "LICENSE", "LICENSE-API"]) {
        into("META-INF")
    }
    from {
        bundleJars(platformVersions)
    }
}

// --------------------------- Build 1.19.4 --------------------------------
tasks.register('build_1_19_4', Jar) {
    var platformVersions = ImmutableMap.<String, List<String>> builder()
            .put("fabric", Arrays.asList("1.19", "1.19.1", "1.19.3", "1.19.4"))
            .put("vanilla", Arrays.asList("1.19", "1.19.1", "1.19.3", "1.19.4"))
            .build()

    dependsOn('build_api')
    platformVersions.each { platform, versions ->
        versions.each { mcVersion ->
            dependsOn(":${platform}:${platform}-${mcVersion}:build")
        }
    }

    String mc_version = '1.19.4'
    archiveFileName = "${project_id}-${mc_version}-${version}.jar"
    destinationDirectory = file("./build/libs")
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes 'Specification-Title': "${project_name} ${mc_version}",
                'Specification-Version': version,
                'Specification-Vendor': 'NeuralNexus',
                'Implementation-Version': version,
                'Implementation-Vendor': 'NeuralNexus',
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    }

    from(["README.md", "LICENSE", "LICENSE-API"]) {
        into("META-INF")
    }
    from {
        bundleJars(platformVersions)
    }
}

// --------------------------- Build MonoJar --------------------------------
tasks.register('build_monojar', Jar) {
    var platformVersions = ImmutableMap.<String, List<String>> builder()
            .put("bukkit", Arrays.asList("b1.7.3", "1.2.5", "1.6.4", "1.7.10", "1.8.8", "1.13.2", "1.15.2", "1.20"))
            .put("bungee", Arrays.asList("1.4.7", "1.8", "1.12", "1.20"))
            .put("fabric", Arrays.asList(
                    "1.7.10", "1.8.9", "1.9.4", "1.10.2", "1.11.2", "1.12.2",
                    "1.14", "1.15", "1.16", "1.17", "1.18",
                    "1.19", "1.19.1", "1.19.3", "1.19.4",
                    "1.20", "1.20.2", "1.20.6"))
            .put("forge", Arrays.asList(
                    "utils-modern",
                    "1.7.10", "1.8.9", "1.9.4", "1.10.2", "1.11.2",
                    "1.12.2", "1.13.2", "1.14.4", "1.15.1", "1.16.3", "1.17.1",
                    "1.18", "1.18.2",
                    "1.19", "1.19.2", "1.19.4",
                    "1.20", "1.20.2", "1.20.6"))
            .put("neoforge", Arrays.asList("1.20.2"))
            .put("sponge", Arrays.asList("4", "5", "6", "7", "8", "9", "10", "11"))
            .put("vanilla", Arrays.asList(
                    "1.19", "1.19.1", "1.19.3", "1.19.4",
                    "1.20", "1.20.2", "1.20.6"))
            .put("velocity", Arrays.asList("3"))
            .build()

    dependsOn('build_api')
    platformVersions.each { platform, versions ->
        versions.each { mcVersion ->
            if (platform == 'forge' && legacyForgeVersions.contains(mcVersion)) {
                dependsOn('build_legacy_forge')
            } else {
                dependsOn(":${platform}:${platform}-${mcVersion}:build")
            }
        }
    }

    String mc_version = 'b1.7.3-1.20.6'
    archiveFileName = "${project_id}-${version}.jar"
    destinationDirectory = file("./build/libs")
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes 'Specification-Title': "${project_name} ${mc_version}",
                'Specification-Version': version,
                'Specification-Vendor': 'NeuralNexus',
                'Implementation-Version': version,
                'Implementation-Vendor': 'NeuralNexus',
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'FMLCorePluginContainsFMLMod': 'true',
                'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
                'MixinConfigs': "taterlib.mixins.v1_20.vanilla.json," +
                        "taterlib.mixins.v1_20.forge.json," +
                        "taterlib.mixins.v1_20_2.vanilla.patch.json," +
                        "taterlib.mixins.v1_20_2.vanilla.json," +
                        "taterlib.mixins.v1_20_2.forge.json," +
                        "taterlib.mixins.v1_20_6.vanilla.patch.json," +
                        "taterlib.mixins.v1_20_6.vanilla.json"
    }

    from(["README.md", "LICENSE", "LICENSE-API"]) {
        into("META-INF")
    }
    from {
        bundleJars(platformVersions)
    }
}

publishing {
    publications {
        uploadAPI(MavenPublication) {
            groupId = group_id
            version = version

            artifact(build_api) {
                artifactId = "${project_id}-api"
            }

            pom {
                name = project_name
                description = project_description
                url = homepage_url
                licenses {
                    license {
                        name = 'GPL-3'
                        url = 'https://github.com/p0t4t0sandwich/TaterLib/blob/main/LICENSE'
                    }
                    license {
                        name = 'MIT License'
                        url = 'https://github.com/p0t4t0sandwich/TaterLib/blob/main/LICENSE-API'
                    }
                }
                developers {
                    developer {
                        id = 'p0t4t0sandwich'
                        name = 'Dylan Sperrer'
                        email = 'dylan@neuralnexus.dev'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/p0t4t0sandwich/TaterLib.git'
                    url = 'https://github.com/p0t4t0sandwich/TaterLib'
                }
            }
        }
        uploadAPIFull(MavenPublication) {
            groupId = group_id
            version = version

            artifact(build_api_full) {
                artifactId = "${project_id}-api-full"
            }

            pom {
                name = project_name
                description = project_description
                url = homepage_url
                licenses {
                    license {
                        name = 'GPL-3'
                        url = 'https://github.com/p0t4t0sandwich/TaterLib/blob/main/LICENSE'
                    }
                    license {
                        name = 'MIT License'
                        url = 'https://github.com/p0t4t0sandwich/TaterLib/blob/main/LICENSE-API'
                    }
                }
                developers {
                    developer {
                        id = 'p0t4t0sandwich'
                        name = 'Dylan Sperrer'
                        email = 'dylan@neuralnexus.dev'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/p0t4t0sandwich/TaterLib.git'
                    url = 'https://github.com/p0t4t0sandwich/TaterLib'
                }
            }
        }
        uploadEntryPointSpoof(MavenPublication) {
            groupId = group_id
            version = "${entrypoint_spoof_version}"

            artifact(build_entrypoint_spoof) {
                artifactId = "entrypoint-spoof"
            }

            pom {
                name = 'entrypoint-spoof'
                description = 'A simple dependency that will allow you to target multiple Minecraft mod/plugin loaders with a single jar, without the\n' +
                        'hassle of using each and every build system.'
                url = 'https://github.com/p0t4t0sandwich/TaterLib/tree/main/tooling/entrypoint-spoof/README.md'
                licenses {
                    license {
                        name = 'GPL-3'
                        url = 'https://github.com/p0t4t0sandwich/TaterLib/blob/main/LICENSE'
                    }
                }
                developers {
                    developer {
                        id = 'p0t4t0sandwich'
                        name = 'Dylan Sperrer'
                        email = 'dylan@neuralnexus.dev'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/p0t4t0sandwich/TaterLib.git'
                    url = 'https://github.com/p0t4t0sandwich/TaterLib'
                }
            }
        }
    }
    repositories {
        mavenLocal()
        maven {
            name = "NeuralNexusReleases"
            url = "https://maven.neuralnexus.dev/releases"
            credentials {
                username = project.findProperty("neuralNexusUsername") ?: System.getenv("NEURALNEXUS_USERNAME")
                password = project.findProperty("neuralNexusPassword") ?: System.getenv("NEURALNEXUS_PASSWORD")
            }
        }
        maven {
            name = "NeuralNexusSnapshots"
            url = "https://maven.neuralnexus.dev/snapshots"
            credentials {
                username = project.findProperty("neuralNexusUsername") ?: System.getenv("NEURALNEXUS_USERNAME")
                password = project.findProperty("neuralNexusPassword") ?: System.getenv("NEURALNEXUS_PASSWORD")
            }
        }
    }
}
