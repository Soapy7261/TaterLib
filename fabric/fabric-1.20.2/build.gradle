import net.fabricmc.loom.task.RemapJarTask

plugins {
    id('fabric-loom') version('1.4-SNAPSHOT')
}

java.toolchain.languageVersion = JavaLanguageVersion.of(java_version)
sourceCompatibility = targetCompatibility = java_version

dependencies {
    compileOnly(project(':common'))
    compileOnly(project(':vanilla:vanilla-1.20'))
    implementation(project(":vanilla:vanilla-${minecraft_version}"))

    // Minecraft and Fabric mappings
    minecraft("com.mojang:minecraft:${project.minecraft_version}")
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${minecraft_version}:${mapping_version}@zip")
    }
    modImplementation("net.fabricmc:fabric-loader:${project.loader_version}")
}

tasks.withType(ProcessResources).configureEach {
    filesMatching([
            "${project_id}.mixins.fabric.1_20_2.json".toString(),
            "${project_id}.mixins.fabric.patch.1_20_2.json".toString()
    ]) {
        expand project.properties
    }
}

loom {
    mixin {
        defaultRefmapName.set("${project_id}.mixins.fabric.1_20_2.refmap.json")
    }
}

shadowJar {
    dependencies {
        include(project(":vanilla:vanilla-${minecraft_version}"))
//        exclude("${group_id}.${project_id}.vanilla.mixin.listeners")
        exclude('/mappings/*')
    }
    // Cheap trick to get rid of mixin.listeners, since the exclude above doesn't work
    relocate("${group_id}.${project_id}.vanilla.mixin.listeners", "${group_id}.${project_id}.vanilla.fabric.mixin.fake")
    relocate("${group_id}.${project_id}.vanilla.fabric", "${group_id}.${project_id}.vanilla.fabric")
    relocate("${group_id}.${project_id}.vanilla", "${group_id}.${project_id}.vanilla.fabric")
}

task remappedShadowJar(type: RemapJarTask) {
    dependsOn(tasks.shadowJar)
    input = tasks.shadowJar.archiveFile
    destinationDirectory = file('../../target')
    archiveFileName = "${project_id}-fabric-${minecraft_version}-${version}.jar"
}

tasks.assemble.dependsOn('remappedShadowJar')
