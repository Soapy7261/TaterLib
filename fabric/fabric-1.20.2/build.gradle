import net.fabricmc.loom.task.RemapJarTask

plugins {
    alias(libs.plugins.shadow)
    alias(libs.plugins.loom)
}

java.toolchain.languageVersion = JavaLanguageVersion.of(java_version)
sourceCompatibility = targetCompatibility = java_version

loom.mixin.useLegacyMixinAp = false

dependencies {
    minecraft("com.mojang:minecraft:${project.minecraft_version}")
    mappings(loom.officialMojangMappings())
    modImplementation("net.fabricmc:fabric-loader:${project.loader_version}")
    compileOnly(project(':api'))
    compileOnly(project(':common'))
    compileOnly(project(':modapi:conditional-mixins'))
    compileOnly(project(':tooling:loader'))
    compileOnly(project(':vanilla:vanilla-1.20'))
    implementation(project(':vanilla:vanilla-1.20.2'))
}

shadowJar {
    dependencies {
        exclude('/mappings/*')
        include(project(':vanilla:vanilla-1.20.2'))
    }
    relocate("dev.neuralnexus.taterlib.v1_20.vanilla", "dev.neuralnexus.taterlib.v1_20.vanilla.fabric")
    relocate("dev.neuralnexus.taterlib.mixin.v1_20_2.vanilla", "dev.neuralnexus.taterlib.mixin.v1_20_2.vanilla.fabric")
    relocate("dev.neuralnexus.taterlib.v1_20_2.vanilla", "dev.neuralnexus.taterlib.v1_20_2.vanilla.fabric")
}

task remappedShadowJar(type: RemapJarTask) {
    dependsOn(tasks.shadowJar)
    input = tasks.shadowJar.archiveFile
    archiveFileName = "${project_id}-fabric-${minecraft_version}-${version}.jar"
}

tasks.assemble.dependsOn('remappedShadowJar')
