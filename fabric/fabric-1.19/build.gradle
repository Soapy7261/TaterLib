import net.fabricmc.loom.task.RemapJarTask

plugins {
    id('fabric-loom') version('1.6-SNAPSHOT')
}

java.toolchain.languageVersion = JavaLanguageVersion.of(java_version)
sourceCompatibility = targetCompatibility = java_version

loom.mixin.useLegacyMixinAp = false

dependencies {
    minecraft("com.mojang:minecraft:${project.minecraft_version}")
    mappings loom.officialMojangMappings()
    modImplementation("net.fabricmc:fabric-loader:${project.loader_version}")

    // Lucko's Permissions API
    modImplementation('me.lucko:fabric-permissions-api:0.2-SNAPSHOT')

    Set<String> apiModules = [
            'fabric-command-api-v2',
            'fabric-lifecycle-events-v1',
            'fabric-networking-api-v1'
    ]

    apiModules.forEach {
        modImplementation(fabricApi.module(it, project.fabric_version))
    }

    compileOnly(project(':common'))
    implementation(project(':vanilla:vanilla-1.19'))
}

tasks.withType(ProcessResources).configureEach {
    filesMatching(['fabric.mod.json', "taterlib.mixins.fabric.v1_19.json".toString()]) {
        expand project.properties
    }
}

shadowJar {
    dependencies {
        include(project(':vanilla:vanilla-1.19'))
        exclude('/mappings/*')
    }
    // Cheap trick to get rid of mixin.listeners, since the exclude above doesn't work
    relocate("dev.neuralnexus.taterlib.v1_19.vanilla.mixin.listeners", "dev.neuralnexus.taterlib.v1_19.vanilla.fabric.mixin.fake")
    relocate("dev.neuralnexus.taterlib.v1_19.vanilla.fabric", "dev.neuralnexus.taterlib.v1_19.vanilla.fabric")
    relocate("dev.neuralnexus.taterlib.v1_19.vanilla", "dev.neuralnexus.taterlib.v1_19.vanilla.fabric")
}

task remappedShadowJar(type: RemapJarTask) {
    dependsOn(tasks.shadowJar)
    input = tasks.shadowJar.archiveFile
    archiveFileName = "${project_id}-fabric-${minecraft_version}-${version}.jar"
}

tasks.assemble.dependsOn('remappedShadowJar')
